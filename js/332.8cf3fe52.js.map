{"version":3,"file":"js/332.8cf3fe52.js","mappings":"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","sources":["webpack://mvtime/./src/store/magic.js","webpack://mvtime/./src/views/Portal/CreateTask.vue","webpack://mvtime/./src/views/Portal/CreateTask.vue?4068"],"sourcesContent":["// Path: store/magic.js\n\n// setup Pinia store\nimport { _status } from \"@/common\";\nimport { defineStore } from \"pinia\";\n\nconst API_URL = \"https://api.mvtt.app/\";\n\nexport const useMagic = defineStore({\n  id: \"magic\",\n  state: () => ({\n    last: {},\n    types: {\n      note: \"Note\",\n      task: \"Assignment\",\n      // socratic: \"Socratic Seminar\",\n      test: \"Test\",\n      // summative: \"Summative Assignment\",\n      // midterm: \"Midterm\",\n      project: \"Project\",\n      quiz: \"Quiz\",\n      exam: \"Exam\",\n    },\n  }),\n  getters: {},\n  actions: {\n    /**\n     * @function path\n     * @description get the smart text associated with a given url\n     * @param {String} path\n     * @returns {String} text - the smart text associated with the url\n     */\n    async text(path) {\n      if (!path) return;\n      return await this.rated_api_get(\"get/magic/link-text\", { path });\n    },\n    /**\n     * @function type\n     * @description get the smart type associated with a given description\n     * @param {String} text\n     */\n    async type(task) {\n      if (!task) return;\n      return await this.rated_api_get(\"get/magic/task-type\", { task });\n    },\n    /**\n     * @function api_get\n     * @description do get request to url: API_URL + endpoint with request query of data\n     * @param {String} endpoint api endpoint\n     * @param {Object} data query params\n     * @returns {Promise<Object>} json\n     */\n    async api_get(endpoint, data) {\n      data = data || {};\n      if (!endpoint) return;\n      // get url with query\n      const url = new URL(API_URL + endpoint);\n      Object.keys(data).forEach((key) => url.searchParams.append(key, data[key]));\n      const run_hash = Math.random().toString(36).substring(7);\n      _status.log(`🛜 Running API fetch | <${run_hash}>`);\n      // do request\n      this.last[endpoint] = { time: Date.now(), hash: run_hash };\n      try {\n        const response = await fetch(url.href, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n        // response\n        if (!response.ok) throw \"Non-valid response\";\n        const json = await response.json();\n        _status.log(`🛜 API fetch success | <${run_hash}>`);\n        return json.data;\n      } catch (err) {\n        _status.error(`🛜 API fetch failed  | <${run_hash}>`, err);\n        return null;\n      }\n    },\n    /**\n     * @function rated_api_get\n     * @description do api_get but abide by rate limit (only eval once every 15 seconds)\n     */\n    async rated_api_get(type) {\n      _status.log(\"🛜 API fetch requested\");\n      const run_hash = Math.random().toString(36).substring(7);\n      const prev_time = this.last[type]?.time;\n      const prev_hash = this.last[type]?.hash;\n      if (Date.now() - prev_time < 2000) {\n        _status.warn(\"🛜 API fetch rate limited\");\n        // wait 15 seconds and see if it is still the most recent request\n        await new Promise((resolve) => setTimeout(resolve, 15000));\n        if (this.last[type]?.time !== prev_time || this.last[type]?.hash !== prev_hash) {\n          _status.warn(\"🛜 Outdated API fetch skipped\");\n          return;\n        } else {\n          _status.log(\"🛜 API fetch rate limit lifted\");\n        }\n      }\n      return await this.api_get(...arguments, run_hash);\n    },\n  },\n});\n","<template>\n  <div class=\"create_task\">\n    <header class=\"modal_header\">\n      <h2 class=\"header_style modal_header_title\">\n        <span>Add a{{ is_vowel(type_full[0]) ? \"n\" : \"\" }}&MediumSpace;</span>\n        <div\n          class=\"header_magic_wrapper magic_wrapper contents_inherit\"\n          :class=\"{ magic_ready: type_ready }\"\n        >\n          <select\n            title=\"Task type\"\n            v-model=\"task.type\"\n            class=\"type_dropdown styled_input styled_select\"\n            ref=\"type\"\n          >\n            <option\n              class=\"type_dropdown__option styled_select__option\"\n              v-for=\"pair in Object.entries(magic.types)\"\n              :value=\"pair[0]\"\n              :key=\"pair[0]\"\n            >\n              {{ pair[1] }}\n            </option>\n          </select>\n          <div\n            class=\"magic magic_in styled_magic alt_bg click-action\"\n            :class=\"{ magic_out: !type_ready, loading_bg: loading_type }\"\n            :disabled=\"!type_ready || loading_type\"\n            @click=\"magic_type\"\n            title=\"Use magically inferred type\"\n          ></div>\n        </div>\n      </h2>\n    </header>\n    <div class=\"overlay_contents\" ref=\"contents\">\n      <div class=\"overlay_contents_text\">\n        <span v-if=\"is_note\">Add a new {{ task.type }} to</span>\n        <span v-else>Schedule a new {{ task.type }} for</span>\n        your class{{ classes && classes.length == 1 ? \"\" : \"es\" }}\n      </div>\n      <div class=\"inputs_row\">\n        <input\n          v-if=\"!is_note\"\n          v-model=\"task.name\"\n          class=\"styled_input\"\n          type=\"text\"\n          :placeholder=\"type_full + ' Name'\"\n          :disabled=\"is_note\"\n        />\n        <input\n          type=\"date\"\n          ref=\"date\"\n          class=\"styled_input input_task__date\"\n          v-model=\"task.date\"\n          :style=\"{ maxWidth: is_note ? '100%' : null }\"\n        />\n        <div class=\"flex-break\"></div>\n        <textarea\n          v-model=\"task.description\"\n          class=\"styled_input styled_textarea task_description\"\n          type=\"text\"\n          :placeholder=\"type_full + (is_note ? ' Contents' : ' Description (Optional)')\"\n        >\n        </textarea>\n        <div class=\"flex-break\"></div>\n        <div class=\"styled_input styled_links_box\">\n          <div class=\"styled_links_display\">\n            <span v-if=\"!task.links || !task.links.length\" class=\"placeholder\"\n              >{{ type_full }} Links (Optional)</span\n            >\n            <div v-else class=\"styled_line_links\">\n              <a\n                class=\"styled_line_links__link styled_line_links__remove\"\n                target=\"_blank\"\n                v-for=\"link in task.links\"\n                :key=\"link.path\"\n                @click=\"remove_link(link)\"\n                >{{ link.text }}</a\n              >\n            </div>\n          </div>\n          <hr class=\"styled_links_separator\" />\n          <div class=\"styled_links_add\">\n            <input\n              class=\"styled_links_add__path\"\n              type=\"url\"\n              v-model=\"newlink.path\"\n              @blur=\"fix_newlink_path\"\n              placeholder=\"Link URL (https://example.com)\"\n            />\n            <div class=\"magic_wrapper styled_links_add__sized\">\n              <input\n                class=\"styled_links_add__text\"\n                type=\"text\"\n                v-model=\"newlink.text\"\n                placeholder=\"Link Text (what students see)\"\n              />\n              <div\n                class=\"magic magic_in styled_magic alt_bg click-action\"\n                :class=\"{ magic_out: !path_ready, loading_bg: loading_text }\"\n                :disabled=\"!path_ready || loading_text\"\n                @click=\"magic_text\"\n                title=\"Auto-generate link text\"\n              ></div>\n            </div>\n            <button\n              class=\"styled_links_add__action\"\n              @click=\"add_newlink\"\n              :disabled=\"newlink_not_ready\"\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"overlay_contents_text\">\n        Choose which classes this {{ task.type }} will be added to\n      </div>\n      <div class=\"classes_checkboxes checkboxes\">\n        <a\n          class=\"checkbox\"\n          v-for=\"class_obj in classes\"\n          :key=\"class_obj.id\"\n          :href=\"'/view/' + store.path_to_ref(class_obj.ref)\"\n        >\n          <input type=\"checkbox\" :id=\"class_obj.id\" :value=\"class_obj.id\" v-model=\"task_classes\" />\n          <label\n            class=\"button_pointer_text class_name\"\n            v-if=\"class_obj.period\"\n            :for=\"class_obj.id\"\n            :style=\"{\n              '--color-class': class_obj.color,\n              '--color-class-alt': class_obj.color + '2d',\n            }\"\n          >\n            P{{ class_obj.period }} - {{ class_obj.name }}\n          </label>\n          <label v-else :for=\"class_obj.id\" @click=\"$event.stopPropagation\">{{\n            class_obj.name\n          }}</label>\n        </a>\n      </div>\n    </div>\n    <div class=\"bottom_actions\">\n      <button class=\"close_action click_escape\" @click=\"$emit('close')\">Close</button>\n      <div class=\"flex_spacer\"></div>\n      <button\n        class=\"continue_action click_ctrlenter\"\n        :class=\"{ loading_bg: loading }\"\n        @click=\"try_submit\"\n        :disabled=\"!ready\"\n      >\n        Add {{ task.type }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\n/**\n * Creates a new task for the teacher's selected class(es).\n *\n * @module CreateTaskView\n * @description Modal that allows teacher's to create a new task for their classes.\n * @param {string} tasktype - The type of task to create (task, project, test, etc.) Provided by the router.\n * @requires module:store/MainStore\n * @emits {Function} close - An event emitted when the task is created or the modal is closed.\n */\n\nimport { useMainStore } from \"@/store\";\nimport { useMagic } from \"@/store/magic\";\nimport { _status } from \"@/common\";\nimport { ErrorToast, WarningToast, SuccessToast } from \"@svonk/util\";\nimport smoothReflow from \"vue-smooth-reflow\";\n\nexport default {\n  name: \"CreateTaskView\",\n  emits: [\"close\"],\n  mixins: [smoothReflow],\n  mounted() {\n    this.$smoothReflow({\n      el: this.$refs.contents,\n    });\n    if (!this.$route?.params?.tasktype) {\n      this.$refs.type.focus();\n    } else {\n      this.$refs.date.focus();\n    }\n    \n    // remove the class and date from the query\n    this.$router.replace({\n      ...this.$route,\n      query: { ...this.$route.query, class: undefined, date: undefined },\n    });\n  },\n  data() {\n    return {\n      task: {\n        name: \"\",\n        date: this.$route.query?.date ? this.$route.query.date : \"\",\n        description: \"\",\n        type: this.$route.params.tasktype ? this.$route.params.tasktype : \"task\",\n      },\n      task_classes: this.$route.query?.class ? [this.$route.query.class] : [],\n      newlink: {\n        text: \"\",\n        path: \"\",\n      },\n      loading: false,\n      loading_type: false,\n      loading_text: false,\n      loaded_type: false,\n      loaded_text: false,\n    };\n  },\n  computed: {\n    ready() {\n      return (\n        (this.task.name || this.is_note) &&\n        this.task.date &&\n        this.task_classes.length &&\n        (!this.is_note || this.task.description)\n      );\n    },\n    type_full() {\n      return this.get_type(this.task.type);\n    },\n    newlink_not_ready() {\n      // check if path and text, and also that path is a valid url\n      if (!this.newlink.path || !this.newlink.text) {\n        return true;\n      }\n      try {\n        void new URL(this.newlink.path);\n        return false;\n      } catch (err) {\n        return true;\n      }\n    },\n    class_name() {\n      if (!this.classes) return null;\n      let class_obj = this.classes.find((class_obj) => class_obj.id === this.class_id);\n      if (!class_obj) return null;\n      return class_obj.name;\n    },\n    store() {\n      return useMainStore();\n    },\n    magic() {\n      return useMagic();\n    },\n    classes() {\n      return this.store.classes;\n    },\n    is_note() {\n      return this.task.type === \"note\";\n    },\n    type_ready() {\n      return !this.loaded_type && this.task && (this.task.description || this.task.name).length > 5;\n    },\n    path_ready() {\n      return (\n        !this.loaded_text &&\n        this.newlink.path &&\n        this.newlink_not_ready &&\n        this.newlink.path.startsWith(\"https://\")\n      );\n    },\n  },\n  methods: {\n    try_submit() {\n      if (this.ready) {\n        this.create_task();\n      } else {\n        new WarningToast(\"Please fill out all required fields\", 1000);\n      }\n    },\n    get_type(type = this.task.type) {\n      return this.magic.types[type] || type;\n    },\n    is_vowel(char) {\n      return [\"a\", \"e\", \"i\", \"o\", \"u\"].includes(char.toLowerCase());\n    },\n    add_newlink() {\n      if (!this.task.links) this.task.links = [];\n      // add protocol if missing\n      this.newlink.path = new URL(this.newlink.path).href;\n      this.task.links.push(this.newlink);\n      this.newlink = {\n        text: \"\",\n        path: \"\",\n      };\n    },\n    create_task() {\n      if (!this.newlink_not_ready) {\n        new WarningToast(\"Don't forget to to click the 'Add' button to add your link!\", 2000);\n        return;\n      }\n      this.loading = true;\n      this.store\n        .create_task(this.task, this.task_classes)\n        .then(() => {\n          //! router to new task view?\n          this.$emit(\"close\");\n        })\n        .catch((err) => {\n          this.loading = false;\n          _status.error(`📃 Couldn't create ${this.task.type || \"task\"}:`, err);\n          new ErrorToast(\"Couldn't create task\", err, 2000);\n        });\n    },\n    remove_link(link) {\n      this.task.links = this.task.links.filter((l) => l.path !== link.path);\n      this.newlink = link;\n    },\n    fix_newlink_path() {\n      if (this.newlink.path && this.newlink.path.includes(\".\")) {\n        try {\n          this.newlink.path = new URL(this.newlink.path).href;\n        } catch (err) {\n          // add protocol if missing\n          this.newlink.path = \"https://\" + this.newlink.path;\n          this.fix_newlink_path();\n        }\n      }\n    },\n    async magic_type() {\n      if (!this.type_ready) return;\n      this.loading_type = true;\n      // cleanup task\n      const clean_task = {\n        name: this.task.name,\n        description: this.task.description,\n        date: this.task.date,\n        classes: this.task_classes.map(\n          (class_id) => this.classes.find((c) => c.id == class_id)?.name\n        ),\n      };\n\n      this.magic\n        .type(JSON.stringify(clean_task))\n        .then((type) => {\n          if (type) {\n            new SuccessToast(`Generated task type '${type}'`, 1500);\n            _status.log(\"🔗 Generated task type:\", type);\n            this.task.type = type;\n          } else {\n            new WarningToast(\"Couldn't reasonably infer a task type\", 2000);\n            _status.warn(\"📃 Couldn't generate task type\");\n          }\n          this.loaded_type = true;\n          this.loading_type = false;\n        })\n        .catch((err) => {\n          new ErrorToast(\"Something went wrong generating the task type\", err, 3000);\n          _status.error(\"⚠ Failed task type generation:\", err);\n          this.loaded_type = false;\n          this.loading_type = false;\n        });\n    },\n    async magic_text() {\n      if (!this.path_ready || this.newlink.text) return;\n      this.loading_text = true;\n      this.magic\n        .text(this.newlink.path)\n        .then((text) => {\n          if (text) {\n            new SuccessToast(`Generated link text '${text}'`, 1500);\n            _status.log(\"🔗 Generated link text:\", text);\n            this.newlink.text = text;\n          } else {\n            new WarningToast(\"Couldn't reasonably infer link text\", 2000);\n            _status.warn(\"📃 Couldn't generate link text\");\n          }\n          this.loaded_text = true;\n          this.loading_text = false;\n        })\n        .catch((err) => {\n          new ErrorToast(\"Couldn't generate link text\", err, 3000);\n          _status.error(\"⚠ Failed link text generation:\", err);\n          this.loaded_text = false;\n          this.loading_text = false;\n        });\n    },\n  },\n  watch: {\n    \"task.type\"(new_type, old_type) {\n      // if task -> note, clear name and move to description if empty {\n      if (new_type == \"note\") {\n        this.task.description = this.task.description || this.task.name;\n        this.task.name = \"\";\n      } else if (old_type == \"note\" && this.task.description?.length <= 35) {\n        this.task.name = this.task.description;\n        this.task.description = \"\";\n      }\n    },\n    // if newlink.path changes, set loaded_text to false\n    \"newlink.path\"(new_path, old_path) {\n      if (new_path != old_path) {\n        this.loaded_text = false;\n      }\n    },\n    \"newlink.text\"(new_text, old_text) {\n      if (new_text != old_text) {\n        this.loaded_text = false;\n      }\n    },\n    // if name, description, date, or classes change, set loaded_type to false\n    // fix for references being the same\n    \"task.name\"(new_name, old_name) {\n      if (new_name !== old_name) {\n        this.loaded_type = false;\n      }\n    },\n    \"task.description\"(new_desc, old_desc) {\n      if (new_desc !== old_desc) {\n        this.loaded_type = false;\n      }\n    },\n    \"task.date\"(new_date, old_date) {\n      if (new_date !== old_date) {\n        this.loaded_type = false;\n      }\n    },\n    task_classes: {\n      deep: true,\n      handler(new_classes, old_classes) {\n        if (new_classes != old_classes) {\n          this.loaded_type = false;\n        }\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n.checkboxes {\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: flex-start;\n  margin-top: 0.5rem;\n}\n.checkbox {\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n}\n.checkbox label {\n  padding-left: 0.5rem;\n  user-select: none;\n  cursor: pointer;\n}\n.inputs_row {\n  flex-flow: row wrap;\n}\n.styled_input.input_task__date {\n  margin-right: 0;\n  max-width: 150px;\n}\nselect.type_dropdown {\n  padding: 5px;\n  background-color: var(--color-overlay-input);\n  color: var(--color-on-overlay-input);\n  border: none;\n  border-radius: var(--radius-overlay-input);\n  width: auto;\n}\n.type_dropdown__option {\n  font-size: 14px;\n}\n.class_name {\n  margin-left: 0.75em;\n}\n.checkboxes .checkbox input:checked + label.class_name {\n  background-color: var(--color-class);\n  color: var(--color-on-class);\n}\n/* new display method */\n.checkboxes .checkbox input {\n  display: none;\n}\n.checkboxes .checkbox label {\n  margin-left: unset;\n}\n/* inline variation */\n.checkboxes {\n  gap: 0.5em;\n  display: inline-flex;\n  flex-flow: row wrap;\n}\n.checkboxes .checkbox {\n  margin: 0;\n  display: inline-flex;\n  flex-grow: 1;\n}\n.checkboxes .checkbox label {\n  width: 100%;\n  text-align: center;\n}\n@media (max-width: 600px) {\n  .checkboxes {\n    gap: 0.5em;\n  }\n  .checkboxes .checkbox,\n  .checkboxes .checkbox label {\n    width: 100%;\n    text-align: left;\n    line-height: 2.5em;\n  }\n  .checkboxes .checkbox label {\n    padding: 0 1em;\n    height: 2.5em;\n  }\n}\n\n.parent.simplified .checkboxes {\n  gap: 0.5em;\n}\n.parent.simplified .checkboxes .checkbox,\n.parent.simplified .checkboxes .checkbox label {\n  width: 100%;\n  text-align: left;\n  line-height: 2.5em;\n}\n.parent.simplified .checkboxes .checkbox label {\n  padding: 0 1em;\n  height: 2.5em;\n}\n</style>\n","import { render } from \"./CreateTask.vue?vue&type=template&id=0417547e&scoped=true\"\nimport script from \"./CreateTask.vue?vue&type=script&lang=js\"\nexport * from \"./CreateTask.vue?vue&type=script&lang=js\"\n\nimport \"./CreateTask.vue?vue&type=style&index=0&id=0417547e&scoped=true&lang=css\"\n\nimport exportComponent from \"/Users/sander/Documents/GitHub/mvtime.github.io/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0417547e\"]])\n\nexport default __exports__"],"names":["API_URL","useMagic","defineStore","id","state","last","types","note","task","test","project","quiz","exam","getters","actions","async","path","this","rated_api_get","endpoint","data","url","URL","Object","keys","forEach","key","searchParams","append","run_hash","Math","random","toString","substring","_status","log","time","Date","now","hash","response","fetch","href","method","headers","ok","json","err","error","type","prev_time","prev_hash","warn","Promise","resolve","setTimeout","api_get","arguments","class","ref","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","$options","is_vowel","type_full","_normalizeClass","magic_ready","type_ready","title","$data","$event","_Fragment","_renderList","entries","magic","pair","value","_hoisted_4","magic_out","loading_bg","loading_type","disabled","onClick","_cache","args","magic_type","_hoisted_6","_hoisted_7","is_note","_hoisted_8","_hoisted_9","classes","length","_hoisted_10","name","placeholder","date","style","_normalizeStyle","maxWidth","_hoisted_12","description","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","links","_hoisted_18","link","target","remove_link","text","_hoisted_19","_hoisted_17","_hoisted_20","_hoisted_21","newlink","onBlur","fix_newlink_path","_hoisted_22","path_ready","loading_text","magic_text","add_newlink","newlink_not_ready","_hoisted_24","_hoisted_25","_hoisted_26","class_obj","store","path_to_ref","task_classes","period","for","color","_hoisted_29","_ctx","stopPropagation","_hoisted_30","_hoisted_31","$emit","_hoisted_32","loading","try_submit","ready","_hoisted_33","emits","mixins","smoothReflow","mounted","$smoothReflow","el","$refs","contents","$route","params","tasktype","focus","$router","replace","query","undefined","loaded_type","loaded_text","computed","get_type","class_name","find","class_id","useMainStore","startsWith","methods","create_task","WarningToast","char","includes","toLowerCase","push","then","catch","ErrorToast","filter","l","clean_task","map","c","JSON","stringify","SuccessToast","watch","new_type","old_type","new_path","old_path","new_text","old_text","new_name","old_name","new_desc","old_desc","new_date","old_date","deep","handler","new_classes","old_classes","__exports__","render"],"sourceRoot":""}